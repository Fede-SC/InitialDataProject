// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Techpork.Infrastructure.Persistance.Data;

namespace Techpork.Infrastructure.Migrations
{
    [DbContext(typeof(TechPorkContext))]
    [Migration("20220602131253_InitDb")]
    partial class InitDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Techpork.Core.Entities.Attachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint")
                        .HasColumnName("author_id");

                    b.Property<DateTime>("LastChange")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("last_change");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("uri");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_attachments");

                    b.HasIndex("AuthorId");

                    b.HasIndex("UserId");

                    b.ToTable("attachments");
                });

            modelBuilder.Entity("Techpork.Core.Entities.Check", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("date");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("deleted");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<float?>("Weight")
                        .HasColumnType("real")
                        .HasColumnName("weight");

                    b.HasKey("Id")
                        .HasName("pk_checks");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_checks_user_id");

                    b.ToTable("checks");
                });

            modelBuilder.Entity("Techpork.Core.Entities.ChecksHasCircumference", b =>
                {
                    b.Property<long>("CheckId")
                        .HasColumnType("bigint")
                        .HasColumnName("check_id");

                    b.Property<long>("CircumferenceId")
                        .HasColumnType("bigint")
                        .HasColumnName("circumference_id");

                    b.Property<float>("Measure")
                        .HasColumnType("real")
                        .HasColumnName("measure");

                    b.HasKey("CheckId", "CircumferenceId")
                        .HasName("pk_checks_has_circumferences");

                    b.HasIndex("CircumferenceId")
                        .HasDatabaseName("ix_checks_has_circumferences_circumference_id");

                    b.ToTable("checks_has_circumferences");
                });

            modelBuilder.Entity("Techpork.Core.Entities.Circumference", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<int>("Code")
                        .HasColumnType("integer")
                        .HasColumnName("code");

                    b.Property<string>("HelpPicUri")
                        .HasColumnType("text")
                        .HasColumnName("help_pic_uri");

                    b.HasKey("Id")
                        .HasName("pk_circumferences");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("circumferences");
                });

            modelBuilder.Entity("Techpork.Core.Entities.Diet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint")
                        .HasColumnName("author_id");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("deleted");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("DiffFromNormo")
                        .HasColumnType("integer")
                        .HasColumnName("diff_from_normo");

                    b.Property<DateTime>("FirstDay")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("first_day");

                    b.Property<DateTime?>("LastDay")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("last_day");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_diets");

                    b.HasIndex("AuthorId");

                    b.HasIndex("UserId");

                    b.ToTable("diets");
                });

            modelBuilder.Entity("Techpork.Core.Entities.DietDay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<long>("DietId")
                        .HasColumnType("bigint")
                        .HasColumnName("diet_id");

                    b.Property<int>("DietIndex")
                        .HasColumnType("integer")
                        .HasColumnName("diet_index");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_diet_days");

                    b.HasIndex("DietId")
                        .HasDatabaseName("ix_diet_days_diet_id");

                    b.ToTable("diet_days");
                });

            modelBuilder.Entity("Techpork.Core.Entities.Food", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<long?>("AuthorId")
                        .HasColumnType("bigint")
                        .HasColumnName("author_id");

                    b.Property<double>("Carb")
                        .HasColumnType("double precision")
                        .HasColumnName("carb");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("deleted");

                    b.Property<double>("Fats")
                        .HasColumnType("double precision")
                        .HasColumnName("fats");

                    b.Property<double>("Fibers")
                        .HasColumnType("double precision")
                        .HasColumnName("fibers");

                    b.Property<int>("Kcals")
                        .HasColumnType("integer")
                        .HasColumnName("kcals");

                    b.Property<string>("NameEn")
                        .HasColumnType("text")
                        .HasColumnName("name_en");

                    b.Property<string>("NameIt")
                        .HasColumnType("text")
                        .HasColumnName("name_it");

                    b.Property<double>("Pro")
                        .HasColumnType("double precision")
                        .HasColumnName("pro");

                    b.Property<int>("ServingSize")
                        .HasColumnType("integer")
                        .HasColumnName("serving_size");

                    b.Property<string>("ServingUnit")
                        .HasColumnType("text")
                        .HasColumnName("serving_unit");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint")
                        .HasColumnName("source_id");

                    b.Property<double>("Sugar")
                        .HasColumnType("double precision")
                        .HasColumnName("sugar");

                    b.HasKey("Id")
                        .HasName("pk_foods");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_foods_author_id");

                    b.HasIndex("SourceId")
                        .HasDatabaseName("ix_foods_source_id");

                    b.HasIndex("NameEn", "AuthorId")
                        .IsUnique();

                    b.HasIndex("NameIt", "AuthorId")
                        .IsUnique();

                    b.ToTable("foods");
                });

            modelBuilder.Entity("Techpork.Core.Entities.FoodHasMicronutrient", b =>
                {
                    b.Property<long>("FoodId")
                        .HasColumnType("bigint")
                        .HasColumnName("food_id");

                    b.Property<long>("MicronutrientId")
                        .HasColumnType("bigint")
                        .HasColumnName("micronutrient_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<long>("UnitMeasureId")
                        .HasColumnType("bigint")
                        .HasColumnName("unit_measure_id");

                    b.HasKey("FoodId", "MicronutrientId")
                        .HasName("pk_food_has_micronutrients");

                    b.HasIndex("MicronutrientId")
                        .HasDatabaseName("ix_food_has_micronutrients_micronutrient_id");

                    b.HasIndex("UnitMeasureId")
                        .HasDatabaseName("ix_food_has_micronutrients_unit_measure_id");

                    b.ToTable("food_has_micronutrients");
                });

            modelBuilder.Entity("Techpork.Core.Entities.FoodHasTag", b =>
                {
                    b.Property<long>("FoodId")
                        .HasColumnType("bigint")
                        .HasColumnName("food_id");

                    b.Property<long>("FoodTagId")
                        .HasColumnType("bigint")
                        .HasColumnName("food_tag_id");

                    b.HasKey("FoodId", "FoodTagId")
                        .HasName("pk_food_has_tags");

                    b.HasIndex("FoodTagId")
                        .HasDatabaseName("ix_food_has_tags_food_tag_id");

                    b.ToTable("food_has_tags");
                });

            modelBuilder.Entity("Techpork.Core.Entities.FoodSource", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_food_sources");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("food_sources");
                });

            modelBuilder.Entity("Techpork.Core.Entities.FoodTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<int>("Code")
                        .HasColumnType("integer")
                        .HasColumnName("code");

                    b.HasKey("Id")
                        .HasName("pk_food_tags");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("food_tags");
                });

            modelBuilder.Entity("Techpork.Core.Entities.Meal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<int>("DayIndex")
                        .HasColumnType("integer")
                        .HasColumnName("day_index");

                    b.Property<long>("DietDayId")
                        .HasColumnType("bigint")
                        .HasColumnName("diet_day_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_meals");

                    b.HasIndex("DietDayId")
                        .HasDatabaseName("ix_meals_diet_day_id");

                    b.ToTable("meals");
                });

            modelBuilder.Entity("Techpork.Core.Entities.Micronutrient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<long?>("FatherId")
                        .HasColumnType("bigint")
                        .HasColumnName("father_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_micronutrients");

                    b.HasIndex("FatherId")
                        .HasDatabaseName("ix_micronutrients_father_id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("micronutrients");
                });

            modelBuilder.Entity("Techpork.Core.Entities.PendingFollowRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<long>("CoachId")
                        .HasColumnType("bigint")
                        .HasColumnName("coach_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("date");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_pending_follow_requests");

                    b.HasIndex("CoachId");

                    b.HasIndex("UserId");

                    b.ToTable("pending_follow_requests");
                });

            modelBuilder.Entity("Techpork.Core.Entities.Pic", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<long>("CheckId")
                        .HasColumnType("bigint")
                        .HasColumnName("check_id");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("uri");

                    b.HasKey("Id")
                        .HasName("pk_pics");

                    b.HasIndex("CheckId")
                        .HasDatabaseName("ix_pics_check_id");

                    b.ToTable("pics");
                });

            modelBuilder.Entity("Techpork.Core.Entities.Portion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<long>("FoodId")
                        .HasColumnType("bigint")
                        .HasColumnName("food_id");

                    b.Property<long>("MealId")
                        .HasColumnType("bigint")
                        .HasColumnName("meal_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("pk_portions");

                    b.HasIndex("FoodId")
                        .HasDatabaseName("ix_portions_food_id");

                    b.HasIndex("MealId")
                        .HasDatabaseName("ix_portions_meal_id");

                    b.ToTable("portions");
                });

            modelBuilder.Entity("Techpork.Core.Entities.UnitMeasure", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_unit_measures");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("unit_measures");
                });

            modelBuilder.Entity("Techpork.Core.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("AvatarUri")
                        .HasColumnType("text")
                        .HasColumnName("avatar_uri");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("date")
                        .HasColumnName("birthday");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Gender")
                        .HasColumnType("text")
                        .HasColumnName("gender");

                    b.Property<int?>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("height");

                    b.Property<long?>("NutritionistId")
                        .HasColumnType("bigint")
                        .HasColumnName("nutritionist_id");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<long?>("TrainerId")
                        .HasColumnType("bigint")
                        .HasColumnName("trainer_id");

                    b.Property<string>("Username")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("username");

                    b.Property<bool>("Visible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("visible");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NutritionistId");

                    b.HasIndex("TrainerId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("Techpork.Core.Entities.Attachment", b =>
                {
                    b.HasOne("Techpork.Core.Entities.User", "Author")
                        .WithMany("AuthorAttachments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Techpork.Core.Entities.User", "User")
                        .WithMany("UserAttachments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Techpork.Core.Entities.Check", b =>
                {
                    b.HasOne("Techpork.Core.Entities.User", "User")
                        .WithMany("Checks")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_checks_users_user_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Techpork.Core.Entities.ChecksHasCircumference", b =>
                {
                    b.HasOne("Techpork.Core.Entities.Check", "Check")
                        .WithMany("ChecksHasCircumferences")
                        .HasForeignKey("CheckId")
                        .HasConstraintName("fk_checks_has_circumferences_checks_check_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Techpork.Core.Entities.Circumference", "Circumference")
                        .WithMany("ChecksHasCircumferences")
                        .HasForeignKey("CircumferenceId")
                        .HasConstraintName("fk_checks_has_circumferences_circumferences_circumference_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Check");

                    b.Navigation("Circumference");
                });

            modelBuilder.Entity("Techpork.Core.Entities.Diet", b =>
                {
                    b.HasOne("Techpork.Core.Entities.User", "Author")
                        .WithMany("AuthorDiets")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Techpork.Core.Entities.User", "User")
                        .WithMany("UserDiets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Techpork.Core.Entities.DietDay", b =>
                {
                    b.HasOne("Techpork.Core.Entities.Diet", "Diet")
                        .WithMany("DietDays")
                        .HasForeignKey("DietId")
                        .HasConstraintName("fk_diet_days_diets_diet_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diet");
                });

            modelBuilder.Entity("Techpork.Core.Entities.Food", b =>
                {
                    b.HasOne("Techpork.Core.Entities.User", "Author")
                        .WithMany("Foods")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("fk_foods_users_author_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Techpork.Core.Entities.FoodSource", "Source")
                        .WithMany("Foods")
                        .HasForeignKey("SourceId")
                        .HasConstraintName("fk_foods_food_sources_source_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Techpork.Core.Entities.FoodHasMicronutrient", b =>
                {
                    b.HasOne("Techpork.Core.Entities.Food", "Food")
                        .WithMany("FoodHasMicronutrients")
                        .HasForeignKey("FoodId")
                        .HasConstraintName("fk_food_has_micronutrients_foods_food_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Techpork.Core.Entities.Micronutrient", "Micronutrient")
                        .WithMany("FoodHasMicronutrients")
                        .HasForeignKey("MicronutrientId")
                        .HasConstraintName("fk_food_has_micronutrients_micronutrients_micronutrient_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Techpork.Core.Entities.UnitMeasure", "UnitMeasure")
                        .WithMany("FoodHasMicronutrients")
                        .HasForeignKey("UnitMeasureId")
                        .HasConstraintName("fk_food_has_micronutrients_unit_measures_unit_measure_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Micronutrient");

                    b.Navigation("UnitMeasure");
                });

            modelBuilder.Entity("Techpork.Core.Entities.FoodHasTag", b =>
                {
                    b.HasOne("Techpork.Core.Entities.Food", "Food")
                        .WithMany("FoodHasTags")
                        .HasForeignKey("FoodId")
                        .HasConstraintName("fk_food_has_tags_foods_food_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Techpork.Core.Entities.FoodTag", "FoodTag")
                        .WithMany("FoodHasTags")
                        .HasForeignKey("FoodTagId")
                        .HasConstraintName("fk_food_has_tags_food_tags_food_tag_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("FoodTag");
                });

            modelBuilder.Entity("Techpork.Core.Entities.Meal", b =>
                {
                    b.HasOne("Techpork.Core.Entities.DietDay", "DietDay")
                        .WithMany("Meals")
                        .HasForeignKey("DietDayId")
                        .HasConstraintName("fk_meals_diet_days_diet_day_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DietDay");
                });

            modelBuilder.Entity("Techpork.Core.Entities.Micronutrient", b =>
                {
                    b.HasOne("Techpork.Core.Entities.Micronutrient", "Father")
                        .WithMany("Children")
                        .HasForeignKey("FatherId")
                        .HasConstraintName("fk_micronutrients_micronutrients_father_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Father");
                });

            modelBuilder.Entity("Techpork.Core.Entities.PendingFollowRequest", b =>
                {
                    b.HasOne("Techpork.Core.Entities.User", "Coach")
                        .WithMany("CoachPendingFollowRequests")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Techpork.Core.Entities.User", "User")
                        .WithMany("UserPendingFollowRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Coach");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Techpork.Core.Entities.Pic", b =>
                {
                    b.HasOne("Techpork.Core.Entities.Check", "Check")
                        .WithMany("Pics")
                        .HasForeignKey("CheckId")
                        .HasConstraintName("fk_pics_checks_check_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Check");
                });

            modelBuilder.Entity("Techpork.Core.Entities.Portion", b =>
                {
                    b.HasOne("Techpork.Core.Entities.Food", "Food")
                        .WithMany("Portions")
                        .HasForeignKey("FoodId")
                        .HasConstraintName("fk_portions_foods_food_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Techpork.Core.Entities.Meal", "Meal")
                        .WithMany("Portions")
                        .HasForeignKey("MealId")
                        .HasConstraintName("fk_portions_meals_meal_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("Techpork.Core.Entities.User", b =>
                {
                    b.HasOne("Techpork.Core.Entities.User", "Nutritionist")
                        .WithMany("NutritionistUsers")
                        .HasForeignKey("NutritionistId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Techpork.Core.Entities.User", "Trainer")
                        .WithMany("TrainerUsers")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Nutritionist");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Techpork.Core.Entities.Check", b =>
                {
                    b.Navigation("ChecksHasCircumferences");

                    b.Navigation("Pics");
                });

            modelBuilder.Entity("Techpork.Core.Entities.Circumference", b =>
                {
                    b.Navigation("ChecksHasCircumferences");
                });

            modelBuilder.Entity("Techpork.Core.Entities.Diet", b =>
                {
                    b.Navigation("DietDays");
                });

            modelBuilder.Entity("Techpork.Core.Entities.DietDay", b =>
                {
                    b.Navigation("Meals");
                });

            modelBuilder.Entity("Techpork.Core.Entities.Food", b =>
                {
                    b.Navigation("FoodHasMicronutrients");

                    b.Navigation("FoodHasTags");

                    b.Navigation("Portions");
                });

            modelBuilder.Entity("Techpork.Core.Entities.FoodSource", b =>
                {
                    b.Navigation("Foods");
                });

            modelBuilder.Entity("Techpork.Core.Entities.FoodTag", b =>
                {
                    b.Navigation("FoodHasTags");
                });

            modelBuilder.Entity("Techpork.Core.Entities.Meal", b =>
                {
                    b.Navigation("Portions");
                });

            modelBuilder.Entity("Techpork.Core.Entities.Micronutrient", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("FoodHasMicronutrients");
                });

            modelBuilder.Entity("Techpork.Core.Entities.UnitMeasure", b =>
                {
                    b.Navigation("FoodHasMicronutrients");
                });

            modelBuilder.Entity("Techpork.Core.Entities.User", b =>
                {
                    b.Navigation("AuthorAttachments");

                    b.Navigation("AuthorDiets");

                    b.Navigation("Checks");

                    b.Navigation("CoachPendingFollowRequests");

                    b.Navigation("Foods");

                    b.Navigation("NutritionistUsers");

                    b.Navigation("TrainerUsers");

                    b.Navigation("UserAttachments");

                    b.Navigation("UserDiets");

                    b.Navigation("UserPendingFollowRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
